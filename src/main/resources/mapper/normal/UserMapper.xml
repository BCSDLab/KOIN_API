<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="koreatech.in.repository.user.UserMapper">
    <sql id="allColumnsOfUsers">
        ${alias}`id` AS `${prefix}id`,
        ${alias}`email` AS `${prefix}email`,
        ${alias}`password` AS `${prefix}password`,
        ${alias}`nickname` AS `${prefix}nickname`,
        ${alias}`name` AS `${prefix}name`,
        ${alias}`phone_number` AS `${prefix}phone_number`,
        ${alias}`user_type` AS `${prefix}user_type`,
        ${alias}`gender` AS `${prefix}gender`,
        ${alias}`is_authed` AS `${prefix}is_authed`,
        ${alias}`last_logged_at` AS `${prefix}last_logged_at`,
        ${alias}`profile_image_url` AS `${prefix}profile_image_url`,
        ${alias}`auth_token` AS `${prefix}auth_token`,
        ${alias}`auth_expired_at` AS `${prefix}auth_expired_at`,
        ${alias}`reset_token` AS `${prefix}reset_token`,
        ${alias}`reset_expired_at` AS `${prefix}reset_expired_at`,
        ${alias}`is_deleted` AS `${prefix}is_deleted`,
        ${alias}`created_at` AS `${prefix}created_at`,
        ${alias}`updated_at` AS `${prefix}updated_at`
    </sql>

    <sql id="allColumnsOfStudents">
        ${alias}`anonymous_nickname` AS `${prefix}anonymous_nickname`,
        ${alias}`student_number` AS `${prefix}student_number`,
        ${alias}`major` AS `${prefix}major`,
        ${alias}`identity` AS `${prefix}identity`,
        ${alias}`is_graduated` AS `${prefix}is_graduated`
    </sql>

    <sql id="allColumnsOfOwners">
        ${alias}`company_registration_number` AS `${prefix}company_registration_number`,
        ${alias}`grant_shop` AS `${prefix}grant_shop`,
        ${alias}`grant_event` AS `${prefix}grant_event`
    </sql>

    <sql id="allColumnsOfAdmins">
        ${alias}`id` AS `${prefix}id`,
        ${alias}`user_id` AS `${prefix}user_id`,
        ${alias}`grant_user` AS `${prefix}grant_user`,
        ${alias}`grant_callvan` AS `${prefix}grant_callvan`,
        ${alias}`grant_land` AS `${prefix}grant_land`,
        ${alias}`grant_community` AS `${prefix}grant_community`,
        ${alias}`grant_shop` AS `${prefix}grant_shop`,
        ${alias}`grant_version` AS `${prefix}grant_version`,
        ${alias}`grant_market` AS `${prefix}grant_market`,
        ${alias}`grant_circle` AS `${prefix}grant_circle`,
        ${alias}`grant_lost` AS `${prefix}grant_lost`,
        ${alias}`grant_survey` AS `${prefix}grant_survey`,
        ${alias}`grant_bcsdlab` AS `${prefix}grant_bcsdlab`,
        ${alias}`grant_event` AS `${prefix}grant_event`,
        ${alias}`is_deleted` AS `${prefix}is_deleted`,
        ${alias}`created_at` AS `${prefix}created_at`,
        ${alias}`updated_at` AS `${prefix}updated_at`
    </sql>

    <sql id="getUser">
        SELECT
        <trim prefixOverrides=",">
            <!-- users 테이블-->
            <trim prefix=",">
                <include refid="allColumnsOfUsers">
                    <property name="alias" value="users."/>
                    <property name="prefix" value="users."/>
                </include>
            </trim>

            <!-- students 테이블 -->
            <trim prefix=",">
                <include refid="allColumnsOfStudents">
                    <property name="alias" value="students."/>
                    <property name="prefix" value="students."/>
                </include>
            </trim>

            <!-- owners 테이블 -->
            <trim prefix=",">
                <include refid="allColumnsOfOwners">
                    <property name="alias" value="owners."/>
                    <property name="prefix" value="owners."/>
                </include>
            </trim>

            <!-- admins 테이블 -->
            <trim prefix=",">
                <include refid="allColumnsOfAdmins">
                    <property name="alias" value="admins."/>
                    <property name="prefix" value="admins."/>
                </include>
            </trim>
        </trim>

        FROM (
            SELECT *
            FROM `koin`.`users`
            WHERE
                `${column}` = ${value}
                AND `is_deleted` = false
        ) `users`

            LEFT JOIN `koin`.`students` `students`
            ON `users`.`id` = `students`.`user_id`

            LEFT JOIN `koin`.`owners` `owners`
            ON `users`.`id` = `owners`.`user_id`

            LEFT JOIN `koin`.`admins` `admins`
            ON
                `users`.`id` = `admins`.`user_id`
                AND `admins`.`is_deleted` = false
    </sql>

    <sql id="getAuthedUser">
        SELECT
        <trim prefixOverrides=",">
            <!-- users 테이블-->
            <trim prefix=",">
                <include refid="allColumnsOfUsers">
                    <property name="alias" value="users."/>
                    <property name="prefix" value="users."/>
                </include>
            </trim>

            <!-- students 테이블 -->
            <trim prefix=",">
                <include refid="allColumnsOfStudents">
                    <property name="alias" value="students."/>
                    <property name="prefix" value="students."/>
                </include>
            </trim>

            <!-- owners 테이블 -->
            <trim prefix=",">
                <include refid="allColumnsOfOwners">
                    <property name="alias" value="owners."/>
                    <property name="prefix" value="owners."/>
                </include>
            </trim>

            <!-- admins 테이블 -->
            <trim prefix=",">
                <include refid="allColumnsOfAdmins">
                    <property name="alias" value="admins."/>
                    <property name="prefix" value="admins."/>
                </include>
            </trim>
        </trim>

        FROM (
            SELECT *
            FROM `koin`.`users`
            WHERE
                `${column}` = ${value}
                AND `is_deleted` = false
                AND `is_authed` = true
        ) `users`

            LEFT JOIN `koin`.`students` `students`
            ON `users`.`id` = `students`.`user_id`

            LEFT JOIN `koin`.`owners` `owners`
            ON `users`.`id` = `owners`.`user_id`

            LEFT JOIN `koin`.`admins` `admins`
            ON
                `users`.`id` = `admins`.`user_id`
                AND `admins`.`is_deleted` = false
    </sql>

    <resultMap id="UserDiscriminator" type="koreatech.in.domain.User.User" >
        <discriminator javaType="String" column="users.user_type">
            <case value="STUDENT" resultMap="StudentResultMap"/>
            <case value="OWNER" resultMap="OwnerResultMap"/>
        </discriminator>
    </resultMap>

    <resultMap id="UserResultMap" type="koreatech.in.domain.User.User">
        <id property="id" column="users.id"/>
        <result property="email" column="users.email"/>
        <result property="password" column="users.password"/>
        <result property="nickname" column="users.nickname"/>
        <result property="name" column="users.name"/>
        <result property="phone_number" column="users.phone_number"/>
        <result property="user_type" column="users.user_type"/>
        <result property="gender" column="users.gender"/>
        <result property="is_authed" column="users.is_authed"/>
        <result property="last_logged_at" column="users.last_logged_at"/>
        <result property="profile_image_url" column="users.profile_image_url"/>
        <result property="auth_token" column="users.auth_token"/>
        <result property="auth_expired_at" column="users.auth_expired_at"/>
        <result property="reset_token" column="users.reset_token"/>
        <result property="reset_expired_at" column="users.reset_expired_at"/>
        <result property="is_deleted" column="users.is_deleted"/>
        <result property="created_at" column="users.created_at"/>
        <result property="updated_at" column="users.updated_at"/>
        <association property="authority" javaType="koreatech.in.domain.Authority">
            <id property="id" column="admins.id"/>
            <id property="user_id" column="admins.user_id"/>
            <id property="grant_user" column="admins.grant_user"/>
            <id property="grant_callvan" column="admins.grant_callvan"/>
            <id property="grant_land" column="admins.grant_land"/>
            <id property="grant_community" column="admins.grant_community"/>
            <id property="grant_shop" column="admins.grant_shop"/>
            <id property="grant_version" column="admins.grant_version"/>
            <id property="grant_market" column="admins.grant_market"/>
            <id property="grant_circle" column="admins.grant_circle"/>
            <id property="grant_lost" column="admins.grant_lost"/>
            <id property="grant_survey" column="admins.grant_survey"/>
            <id property="grant_bcsdlab" column="admins.grant_bcsdlab"/>
            <id property="grant_event" column="admins.grant_event"/>
            <id property="is_deleted" column="admins.is_deleted"/>
            <id property="created_at" column="admins.created_at"/>
            <id property="updated_at" column="admins.updated_at"/>
        </association>
    </resultMap>

    <resultMap id="StudentResultMap" extends="UserResultMap" type="koreatech.in.domain.User.student.Student">
        <result property="anonymous_nickname" column="students.anonymous_nickname"/>
        <result property="student_number" column="students.student_number"/>
        <result property="major" column="students.major"/>
        <result property="identity" column="students.identity"/>
        <result property="is_graduated" column="students.is_graduated"/>
    </resultMap>

    <resultMap id="OwnerResultMap" extends="UserResultMap" type="koreatech.in.domain.User.owner.Owner">
        <result property="company_registration_number" column="owners.company_registration_number"/>
        <result property="grant_shop" column="owners.grant_shop"/>
        <result property="grant_event" column="owners.grant_event"/>
    </resultMap>

    <resultMap id="UsersResultMap" type="koreatech.in.domain.User.Users">
        <collection property="users" resultMap="UserResultMap"/>
    </resultMap>

    <resultMap id="UserResultMapV2" type="koreatech.in.domain.User.User">
        <id property="id" column="id"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="nickname" column="nickname"/>
        <result property="name" column="name"/>
        <result property="phone_number" column="phone_number"/>
        <result property="user_type" column="user_type"/>
        <result property="gender" column="gender"/>
        <result property="is_authed" column="is_authed"/>
        <result property="last_logged_at" column="last_logged_at"/>
        <result property="profile_image_url" column="profile_image_url"/>
        <result property="auth_token" column="auth_token"/>
        <result property="auth_expired_at" column="auth_expired_at"/>
        <result property="reset_token" column="reset_token"/>
        <result property="reset_expired_at" column="reset_expired_at"/>
        <result property="is_deleted" column="is_deleted"/>
        <result property="created_at" column="created_at"/>
        <result property="updated_at" column="updated_at"/>
        <discriminator javaType="String" column="user_type">
            <case value="STUDENT" resultMap="StudentResultMapV2"/>
            <case value="OWNER" resultMap="OwnerResultMapV2"/>
        </discriminator>
    </resultMap>

    <resultMap id="StudentResultMapV2" extends="UserResultMapV2" type="koreatech.in.domain.User.student.Student">
        <result property="anonymous_nickname" column="anonymous_nickname"/>
        <result property="student_number" column="student_number"/>
        <result property="major" column="major"/>
        <result property="identity" column="identity"/>
        <result property="is_graduated" column="is_graduated"/>
    </resultMap>

    <resultMap id="OwnerResultMapV2" extends="UserResultMapV2"
               type="koreatech.in.domain.User.owner.Owner">
        <result property="user_id" column="user_id"/>
        <result property="company_registration_number" column="company_registration_number"/>
        <result property="grant_shop" column="grant_shop"/>
        <result property="grant_event" column="owners.grant_event"/>
        <collection column="user_id" property="shops" javaType="List"
                    ofType="koreatech.in.domain.Shop.Shop"
                    select="koreatech.in.repository.ShopMapper.getShopByOwnerId">
        </collection>
    </resultMap>

    <!-- 구분선 -->
    <select id="getAuthedUserById" parameterType="integer" resultMap="UserDiscriminator">
        <include refid="getAuthedUser">
            <property name="column" value="id"/>
            <property name="value" value="#{id}"/>
        </include>
    </select>

    <select id="getAuthedUserByEmail" parameterType="string" resultMap="UserDiscriminator">
        <include refid="getAuthedUser">
            <property name="column" value="email"/>
            <property name="value" value="#{email}"/>
        </include>
    </select>

    <select id="getUserByEmail" resultMap="UserDiscriminator">
        <include refid="getUser">
            <property name="column" value="email"/>
            <property name="value" value="#{email}"/>
        </include>
    </select>

    <select id="getUserByNickname" parameterType="string" resultMap="UserDiscriminator">
        <include refid="getUser">
            <property name="column" value="nickname"/>
            <property name="value" value="#{nickname}"/>
        </include>
    </select>

    <select id="getUserByAuthToken" parameterType="string" resultMap="UserDiscriminator">
        <include refid="getUser">
            <property name="column" value="auth_token"/>
            <property name="value" value="#{authToken}"/>
        </include>
    </select>

    <select id="getAuthedUserByResetToken" parameterType="string" resultMap="UserDiscriminator">
        <include refid="getAuthedUser">
            <property name="column" value="reset_token"/>
            <property name="value" value="#{resetToken}"/>
        </include>
    </select>

    <delete id="deleteUser" parameterType="koreatech.in.domain.User.User">
        <if test='user.user_type.name().equals("STUDENT")'>
            DELETE
            FROM `koin`.`students`
            WHERE `user_id` = #{user.id};

            DELETE
            FROM `koin`.`admins`
            WHERE `user_id` = #{user.id};
        </if>
        <if test='user.user_type.name().equals("OWNER")'>
            DELETE
            FROM `koin`.`owners`
            WHERE `user_id` = #{user.id};

            DELETE
            FROM `koin`.`owner_shop_attachment`
            WHERE `owner_id` = #{user.id};
        </if>

        DELETE
        FROM `koin`.`users`
        WHERE `id` = #{user.id};
    </delete>

    <update id="updateUser">
        UPDATE `koin`.`users`
        SET
            `email` = #{user.email},
            `password` = #{user.password},
            `nickname` = #{user.nickname},
            `name` = #{user.name},
            `phone_number` = #{user.phone_number},
            `user_type` = #{user.user_type},
            `gender` = #{user.gender},
            `is_authed` = #{user.is_authed},
            `last_logged_at` = #{user.last_logged_at},
            `profile_image_url` = #{user.profile_image_url},
            `auth_token` = #{user.auth_token},
            `auth_expired_at` = #{user.auth_expired_at},
            `reset_token` = #{user.reset_token},
            `reset_expired_at` = #{user.reset_expired_at}
        WHERE `id` = #{user.id}
    </update>

    <update id="deleteRelationBetweenOwnerAndShop" parameterType="integer">
        UPDATE `koin`.`shops`
        SET `owner_id` = null
        WHERE `owner_id` = #{ownerId}
    </update>

    <select id="getUserById" parameterType="Integer" resultMap="UserDiscriminator">
        SELECT
            `t1`.`id` AS `users.id`,
            `t1`.`email` AS `users.email`,
            `t1`.`password` AS `users.password`,
            `t1`.`nickname` AS `users.nickname`,
            `t1`.`name` AS `users.name`,
            `t1`.`phone_number` AS `users.phone_number`,
            `t1`.`user_type` AS `users.user_type`,
            `t1`.`gender` AS `users.gender`,
            `t1`.`is_authed` AS `users.is_authed`,
            `t1`.`last_logged_at` AS `users.last_logged_at`,
            `t1`.`profile_image_url` AS `users.profile_image_url`,
            `t1`.`auth_token` AS `users.auth_token`,
            `t1`.`auth_expired_at` AS `users.auth_expired_at`,
            `t1`.`reset_token` AS `users.reset_token`,
            `t1`.`reset_expired_at` AS `users.reset_expired_at`,
            `t1`.`is_deleted` AS `users.is_deleted`,
            `t1`.`created_at` AS `users.created_at`,
            `t1`.`updated_at` AS `users.updated_at`,

            `t2`.`anonymous_nickname` AS `students.anonymous_nickname`,
            `t2`.`student_number` AS `students.student_number`,
            `t2`.`major` AS `students.major`,
            `t2`.`identity` AS `students.identity`,
            `t2`.`is_graduated` AS `students.is_graduated`,

            `t3`.`company_registration_number` AS `owners.company_registration_number`,
            `t3`.`grant_shop` AS `owners.grant_shop`,
            `t3`.`grant_event` AS `owners.grant_event`,

            `t4`.`id` AS `admins.id`,
            `t4`.`user_id` AS `admins.user_id`,
            `t4`.`grant_user` AS `admins.grant_user`,
            `t4`.`grant_callvan` AS `admins.grant_callvan`,
            `t4`.`grant_land` AS `admins.grant_land`,
            `t4`.`grant_community` AS `admins.grant_community`,
            `t4`.`grant_shop` AS `admins.grant_shop`,
            `t4`.`grant_version` AS `admins.grant_version`,
            `t4`.`grant_market` AS `admins.grant_market`,
            `t4`.`grant_circle` AS `admins.grant_circle`,
            `t4`.`grant_lost` AS `admins.grant_lost`,
            `t4`.`grant_survey` AS `admins.grant_survey`,
            `t4`.`grant_bcsdlab` AS `admins.grant_bcsdlab`,
            `t4`.`grant_event` AS `admins.grant_event`,
            `t4`.`is_deleted` AS `admins.is_deleted`,
            `t4`.`created_at` AS `admins.created_at`,
            `t4`.`updated_at` AS `admins.updated_at`

        FROM (
                 SELECT *
                 FROM `koin`.`users`
                 WHERE
                     id = #{id}
             ) `t1`

                 LEFT JOIN `koin`.`students` `t2`
                           ON `t1`.`id` = `t2`.`user_id`

                 LEFT JOIN `koin`.`owners` `t3`
                           ON `t1`.`id` = `t3`.`user_id`

                 LEFT JOIN `koin`.`admins` `t4`
                           ON
                                       `t1`.`id` = `t4`.`user_id`
                                   AND `t4`.`is_deleted` = 0
    </select>

    <select id="getUserListForAdmin" resultMap="UserResultMapV2">
        SELECT
        <include refid="users-all">
            <property name="prefix" value=""/>
            <property name="alias" value="U."/>
        </include>
        <choose>
            <when test="userType != null and 'userType.equals(STUDENT)'">
            ,
                <include refid="students-all">
                    <property name="prefix" value=""/>
                    <property name="alias" value="STD."/>
                </include>
            </when>
            <when test="userType != null and 'userType.equals(OWNER)'">
            ,
                <include refid="owners-all">
                    <property name="prefix" value=""/>
                    <property name="alias" value="OWN."/>
                </include>
            </when>
        </choose>
        FROM `koin`.`users` U
        <if test="@org.apache.commons.lang.StringUtils@isNotEmpty(userType)">
            <choose>
                <when test="userType != null and 'userType.equals(STUDENT)'">
                    LEFT JOIN `koin`.`students` STD ON U.id = STD.user_id
                </when>
                <when test="userType != null and 'userType.equals(OWNER)'">
                    LEFT JOIN `koin`.`owners` OWN ON U.id = OWN.user_id
                </when>
            </choose>
            WHERE U.user_type = #{userType}
        </if>
        LIMIT #{cursor}, #{limit}
    </select>

    <select id="isNicknameAlreadyUsed" resultType="Integer">
        select count(*)
        from koin.users
        where nickname=#{nickname}
          and is_deleted=0 limit 1;
    </select>

    <select id="getUserByNickName" resultMap="UserDiscriminator">
        SELECT *
        FROM koin.users
        WHERE NICKNAME = #{nickname} AND IS_DELETED = 0;
    </select>



    <insert id="insertUser" parameterType="koreatech.in.domain.User.User">
        INSERT INTO koin.users (
        email,
        password,
        name,
        nickname,
        gender,
        phone_number,
        auth_token,
        auth_expired_at,
        is_authed,
        profile_image_url,
        user_type)
        VALUES (
        #{email},
        #{password},
        #{name},
        #{nickname},
        #{gender},
        #{phone_number},
        #{auth_token},
        #{auth_expired_at},
        #{is_authed},
        #{profile_image_url},
        #{user_type});
        <selectKey keyProperty="id" resultType="Integer">
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>






    <select id="isEmailAlreadyExist" parameterType="koreatech.in.domain.User.EmailAddress" resultType="Boolean">
        SELECT IF (count(*) != 0, 1, 0)
        FROM koin.users
        <bind name="emailAddress" value="_parameter.getEmailAddress()"/>
        WHERE email= #{emailAddress}
    </select>

    <select id="getNicknameUsedCount" resultType="Integer">
        SELECT COUNT(*)
        FROM koin.users
        WHERE nickname = #{nickname}
          AND id != #{userId}
            LIMIT 1;
    </select>

    <sql id="users-all">
        ${alias}id AS ${prefix}id
        ,${alias}nickname AS ${prefix}nickname
        ,${alias}phone_number AS ${prefix}phone_number
        ,${alias}user_type AS ${prefix}user_type
        ,${alias}gender AS ${prefix}gender
        ,${alias}is_authed AS ${prefix}is_authed
        ,${alias}last_logged_at AS ${prefix}last_logged_at
        ,${alias}profile_image_url AS ${prefix}profile_image_url
        ,${alias}is_deleted AS ${prefix}is_deleted
        ,${alias}created_at AS ${prefix}created_at
        ,${alias}updated_at AS ${prefix}updated_at
    </sql>

    <sql id="students-all">
        ${alias}user_id AS ${prefix}user_id
        ,${alias}anonymous_nickname AS ${prefix}anonymous_nickname
        ,${alias}student_number AS ${prefix}student_number
        ,${alias}major AS ${prefix}major
        ,${alias}identity AS ${prefix}identity
        ,${alias}is_graduated AS ${prefix}is_graduated
    </sql>

    <sql id="owners-all">
        ${alias}user_id AS ${prefix}user_id
        ,${alias}company_registration_number AS ${prefix}company_registration_number
        ,${alias}company_registration_certificate_image_url AS ${prefix}company_registration_certificate_image_url
        ,${alias}grant_shop AS ${prefix}grant_shop
        ,${alias}grant_event AS ${prefix}grant_event
    </sql>

</mapper>
