<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="koreatech.in.repository.user.UserMapper">
    <select id="getAuthedUserById" resultMap="UserDiscriminator">
        SELECT
            `t1`.`id` AS `users.id`,
            `t1`.`account` AS `users.account`,
            `t1`.`password` AS `users.password`,
            `t1`.`nickname` AS `users.nickname`,
            `t1`.`name` AS `users.name`,
            `t1`.`phone_number` AS `users.phone_number`,
            `t1`.`user_type` AS `users.user_type`,
            `t1`.`email` AS `users.email`,
            `t1`.`gender` AS `users.gender`,
            `t1`.`is_authed` AS `users.is_authed`,
            `t1`.`last_logged_at` AS `users.last_logged_at`,
            `t1`.`profile_image_url` AS `users.profile_image_url`,
            `t1`.`auth_token` AS `users.auth_token`,
            `t1`.`auth_expired_at` AS `users.auth_expired_at`,
            `t1`.`reset_token` AS `users.reset_token`,
            `t1`.`reset_expired_at` AS `user.reset_expired_at`,
            `t1`.`is_deleted` AS `users.is_deleted`,
            `t1`.`created_at` AS `users.created_at`,
            `t1`.`updated_at` AS `users.updated_at`,

            `t2`.`anonymous_nickname` AS `students.anonymous_nickname`,
            `t2`.`student_number` AS `students.student_number`,
            `t2`.`major` AS `students.major`,
            `t2`.`identity` AS `students.identity`,
            `t2`.`is_graduated` AS `students.is_graduated`,

            `t3`.`company_registration_number` AS `owners.company_registration_number`,
            `t3`.`company_registration_certificate_image_url` AS `owners.company_registration_certificate_image_url`,
            `t3`.`grant_shop` AS `owners.grant_shop`,
            `t3`.`grant_event` AS `owners.grant_event`,

            `t4`.`id` AS `admins.id`,
            `t4`.`user_id` AS `admins.user_id`,
            `t4`.`grant_user` AS `admins.grant_user`,
            `t4`.`grant_callvan` AS `admins.grant_callvan`,
            `t4`.`grant_land` AS `admins.grant_land`,
            `t4`.`grant_community` AS `admins.grant_community`,
            `t4`.`grant_shop` AS `admins.grant_shop`,
            `t4`.`grant_version` AS `admins.grant_version`,
            `t4`.`grant_market` AS `admins.grant_market`,
            `t4`.`grant_circle` AS `admins.grant_circle`,
            `t4`.`grant_lost` AS `admins.grant_lost`,
            `t4`.`grant_survey` AS `admins.grant_survey`,
            `t4`.`grant_bcsdlab` AS `admins.grant_bcsdlab`,
            `t4`.`grant_event` AS `admins.grant_event`,
            `t4`.`is_deleted` AS `admins.is_deleted`,
            `t4`.`created_at` AS `admins.created_at`,
            `t4`.`updated_at` AS `admins.updated_at`

        FROM (
            SELECT *
            FROM `koin`.`users`
            WHERE
                `id` = #{id}
                AND `is_authed` = 1
                AND `is_deleted` = 0
        ) `t1`

            LEFT JOIN `koin`.`students` `t2`
            ON `t1`.`id` = `t2`.`user_id`

            LEFT JOIN `koin`.`owners` `t3`
            ON `t1`.`id` = `t3`.`user_id`

            LEFT JOIN `koin`.`admins` `t4`
            ON
                `t1`.`id` = `t4`.`user_id`
                AND `t4`.`is_deleted` = 0
    </select>

    <select id="getAuthedUserByAccount" resultMap="UserDiscriminator">
        SELECT
            `t1`.`id` AS `users.id`,
            `t1`.`account` AS `users.account`,
            `t1`.`password` AS `users.password`,
            `t1`.`nickname` AS `users.nickname`,
            `t1`.`name` AS `users.name`,
            `t1`.`phone_number` AS `users.phone_number`,
            `t1`.`user_type` AS `users.user_type`,
            `t1`.`email` AS `users.email`,
            `t1`.`gender` AS `users.gender`,
            `t1`.`is_authed` AS `users.is_authed`,
            `t1`.`last_logged_at` AS `users.last_logged_at`,
            `t1`.`profile_image_url` AS `users.profile_image_url`,
            `t1`.`auth_token` AS `users.auth_token`,
            `t1`.`auth_expired_at` AS `users.auth_expired_at`,
            `t1`.`reset_token` AS `users.reset_token`,
            `t1`.`reset_expired_at` AS `user.reset_expired_at`,
            `t1`.`is_deleted` AS `users.is_deleted`,
            `t1`.`created_at` AS `users.created_at`,
            `t1`.`updated_at` AS `users.updated_at`,

            `t2`.`anonymous_nickname` AS `students.anonymous_nickname`,
            `t2`.`student_number` AS `students.student_number`,
            `t2`.`major` AS `students.major`,
            `t2`.`identity` AS `students.identity`,
            `t2`.`is_graduated` AS `students.is_graduated`,

            `t3`.`company_registration_number` AS `owners.company_registration_number`,
            `t3`.`company_registration_certificate_image_url` AS `owners.company_registration_certificate_image_url`,
            `t3`.`grant_shop` AS `owners.grant_shop`,
            `t3`.`grant_event` AS `owners.grant_event`,

            `t4`.`id` AS `admins.id`,
            `t4`.`user_id` AS `admins.user_id`,
            `t4`.`grant_user` AS `admins.grant_user`,
            `t4`.`grant_callvan` AS `admins.grant_callvan`,
            `t4`.`grant_land` AS `admins.grant_land`,
            `t4`.`grant_community` AS `admins.grant_community`,
            `t4`.`grant_shop` AS `admins.grant_shop`,
            `t4`.`grant_version` AS `admins.grant_version`,
            `t4`.`grant_market` AS `admins.grant_market`,
            `t4`.`grant_circle` AS `admins.grant_circle`,
            `t4`.`grant_lost` AS `admins.grant_lost`,
            `t4`.`grant_survey` AS `admins.grant_survey`,
            `t4`.`grant_bcsdlab` AS `admins.grant_bcsdlab`,
            `t4`.`grant_event` AS `admins.grant_event`,
            `t4`.`is_deleted` AS `admins.is_deleted`,
            `t4`.`created_at` AS `admins.created_at`,
            `t4`.`updated_at` AS `admins.updated_at`

        FROM (
            SELECT *
            FROM `koin`.`users`
            WHERE
                `account` = #{account}
                AND `is_authed` = 1
                AND `is_deleted` = 0
        ) `t1`

            LEFT JOIN `koin`.`students` `t2`
            ON `t1`.`id` = `t2`.`user_id`

            LEFT JOIN `koin`.`owners` `t3`
            ON `t1`.`id` = `t3`.`user_id`

            LEFT JOIN `koin`.`admins` `t4`
            ON
                `t1`.`id` = `t4`.`user_id`
                AND `t4`.`is_deleted` = 0
    </select>

    <resultMap id="UserDiscriminator" type="koreatech.in.domain.User.User" >
        <discriminator javaType="String" column="users.user_type">
            <case value="STUDENT" resultMap="StudentResultMap"/>
            <case value="OWNER" resultMap="OwnerResultMap"/>
        </discriminator>
    </resultMap>

    <resultMap id="UserResultMap" type="koreatech.in.domain.User.User">
        <id property="id" column="users.id"/>
        <result property="account" column="users.account"/>
        <result property="password" column="users.password"/>
        <result property="nickname" column="users.nickname"/>
        <result property="name" column="users.name"/>
        <result property="phone_number" column="users.phone_number"/>
        <result property="user_type" column="users.user_type"/>
        <result property="email" column="users.email"/>
        <result property="gender" column="users.gender"/>
        <result property="is_authed" column="users.is_authed"/>
        <result property="last_logged_at" column="users.last_logged_at"/>
        <result property="profile_image_url" column="users.profile_image_url"/>
        <result property="auth_token" column="users.auth_token"/>
        <result property="auth_expired_at" column="users.auth_expired_at"/>
        <result property="reset_token" column="users.reset_token"/>
        <result property="reset_expired_at" column="users.reset_expired_at"/>
        <result property="is_deleted" column="users.is_deleted"/>
        <result property="created_at" column="users.created_at"/>
        <result property="updated_at" column="users.updated_at"/>
        <association property="authority" javaType="koreatech.in.domain.Authority">
            <id property="id" column="admins.id"/>
            <id property="user_id" column="admins.user_id"/>
            <id property="grant_user" column="admins.grant_user"/>
            <id property="grant_callvan" column="admins.grant_callvan"/>
            <id property="grant_land" column="admins.grant_land"/>
            <id property="grant_community" column="admins.grant_community"/>
            <id property="grant_shop" column="admins.grant_shop"/>
            <id property="grant_version" column="admins.grant_version"/>
            <id property="grant_market" column="admins.grant_market"/>
            <id property="grant_circle" column="admins.grant_circle"/>
            <id property="grant_lost" column="admins.grant_lost"/>
            <id property="grant_survey" column="admins.grant_survey"/>
            <id property="grant_bcsdlab" column="admins.grant_bcsdlab"/>
            <id property="grant_event" column="admins.grant_event"/>
            <id property="is_deleted" column="admins.is_deleted"/>
            <id property="created_at" column="admins.created_at"/>
            <id property="updated_at" column="admins.updated_at"/>
        </association>
    </resultMap>

    <resultMap id="StudentResultMap" extends="UserResultMap" type="koreatech.in.domain.User.student.Student">
        <result property="anonymous_nickname" column="students.anonymous_nickname"/>
        <result property="student_number" column="students.student_number"/>
        <result property="major" column="students.major"/>
        <result property="identity" column="students.identity"/>
        <result property="is_graduated" column="students.is_graduated"/>
    </resultMap>

    <resultMap id="OwnerResultMap" extends="UserResultMap" type="koreatech.in.domain.User.owner.Owner">
        <result property="company_registration_number" column="owners.company_registration_number"/>
        <result property="company_registration_certificate_image_url" column="owners.company_registration_certificate_image_url"/>
        <result property="grant_shop" column="owners.grant_shop"/>
        <result property="grant_event" column="owners.grant_event"/>
    </resultMap>

    <update id="updateLastLoggedAt">
        UPDATE `koin`.`users`
        SET `last_logged_at` = #{currentDate}
        WHERE
            `id` = #{id}
            AND `is_deleted` = 0
    </update>

    <delete id="deleteUserLogicallyById">
        UPDATE `koin`.`users`
        SET `is_deleted` = 1
        WHERE `id` = #{id}
    </delete>

    <select id="getUserByNickname" parameterType="string" resultMap="UserDiscriminator">
        SELECT
            `t1`.`id` AS `users.id`,
            `t1`.`account` AS `users.account`,
            `t1`.`password` AS `users.password`,
            `t1`.`nickname` AS `users.nickname`,
            `t1`.`name` AS `users.name`,
            `t1`.`phone_number` AS `users.phone_number`,
            `t1`.`user_type` AS `users.user_type`,
            `t1`.`email` AS `users.email`,
            `t1`.`gender` AS `users.gender`,
            `t1`.`is_authed` AS `users.is_authed`,
            `t1`.`last_logged_at` AS `users.last_logged_at`,
            `t1`.`profile_image_url` AS `users.profile_image_url`,
            `t1`.`auth_token` AS `users.auth_token`,
            `t1`.`auth_expired_at` AS `users.auth_expired_at`,
            `t1`.`reset_token` AS `users.reset_token`,
            `t1`.`reset_expired_at` AS `user.reset_expired_at`,
            `t1`.`is_deleted` AS `users.is_deleted`,
            `t1`.`created_at` AS `users.created_at`,
            `t1`.`updated_at` AS `users.updated_at`,

            `t2`.`anonymous_nickname` AS `students.anonymous_nickname`,
            `t2`.`student_number` AS `students.student_number`,
            `t2`.`major` AS `students.major`,
            `t2`.`identity` AS `students.identity`,
            `t2`.`is_graduated` AS `students.is_graduated`,

            `t3`.`company_registration_number` AS `owners.company_registration_number`,
            `t3`.`company_registration_certificate_image_url` AS `owners.company_registration_certificate_image_url`,
            `t3`.`grant_shop` AS `owners.grant_shop`,
            `t3`.`grant_event` AS `owners.grant_event`,

            `t4`.`id` AS `admins.id`,
            `t4`.`user_id` AS `admins.user_id`,
            `t4`.`grant_user` AS `admins.grant_user`,
            `t4`.`grant_callvan` AS `admins.grant_callvan`,
            `t4`.`grant_land` AS `admins.grant_land`,
            `t4`.`grant_community` AS `admins.grant_community`,
            `t4`.`grant_shop` AS `admins.grant_shop`,
            `t4`.`grant_version` AS `admins.grant_version`,
            `t4`.`grant_market` AS `admins.grant_market`,
            `t4`.`grant_circle` AS `admins.grant_circle`,
            `t4`.`grant_lost` AS `admins.grant_lost`,
            `t4`.`grant_survey` AS `admins.grant_survey`,
            `t4`.`grant_bcsdlab` AS `admins.grant_bcsdlab`,
            `t4`.`grant_event` AS `admins.grant_event`,
            `t4`.`is_deleted` AS `admins.is_deleted`,
            `t4`.`created_at` AS `admins.created_at`,
            `t4`.`updated_at` AS `admins.updated_at`

        FROM (
            SELECT *
            FROM `koin`.`users`
            WHERE
                `nickname` = #{nickname}
                AND `is_deleted` = 0
        ) `t1`

            LEFT JOIN `koin`.`students` `t2`
            ON `t1`.`id` = `t2`.`user_id`

            LEFT JOIN `koin`.`owners` `t3`
            ON `t1`.`id` = `t3`.`user_id`

            LEFT JOIN `koin`.`admins` `t4`
            ON
                `t1`.`id` = `t4`.`user_id`
                AND `t4`.`is_deleted` = 0
    </select>

    <update id="updateUser">
        UPDATE `koin`.`users`
        SET
            `account` = #{user.account},
            `password` = #{user.password},
            `nickname` = #{user.nickname},
            `name` = #{user.name},
            `phone_number` = #{user.phone_number},
            `user_type` = #{user.user_type},
            `email` = #{user.email},
            `gender` = #{user.gender},
            `is_authed` = #{user.is_authed},
            `last_logged_at` = #{user.last_logged_at},
            `profile_image_url` = #{user.profile_image_url},
            `auth_token` = #{user.auth_token},
            `auth_expired_at` = #{user.auth_expired_at},
            `reset_token` = #{user.reset_token},
            `reset_expired_at` = #{user.reset_expired_at}
        WHERE `id` = #{user.id}
    </update>

    <update id="updateResetTokenAndResetTokenExpiredTimeById">
        update koin.users
        set
            reset_token=#{resetToken},
            reset_expired_at=#{resetTokenExpiredTime}
        where id=#{id}
    </update>



    <select id="getUserById" resultMap="UserDiscriminator">
        SELECT * FROM koin.users WHERE ID = #{id};
    </select>

    <select id="getTotalCount" resultType="Integer">
        SELECT COUNT(*) AS totalCount FROM koin.users WHERE IS_DELETED = 0;
    </select>

    <select id="getUserListForAdmin" resultMap="UserDiscriminator">
        SELECT *
        FROM koin.users
        ORDER BY created_at LIMIT #{cursor}, #{limit};
    </select>

    <select id="isAccountAlreadyUsed" resultType="Integer">
        select count(*)
        from koin.users
        where account=#{account} and is_deleted=0
        limit 1;
    </select>

    <select id="isNicknameAlreadyUsed" resultType="Integer">
        select count(*)
        from koin.users
        where nickname=#{nickname}
          and is_deleted=0 limit 1;
    </select>

    <select id="getUserByNickName" resultMap="UserDiscriminator">
        SELECT *
        FROM koin.users
        WHERE NICKNAME = #{nickname} AND IS_DELETED = 0;
    </select>

    <select id="getUserByAccount" resultMap="UserDiscriminator">
        SELECT *
        FROM koin.users
        where account=#{account}
    </select>

    <select id="getUserTypeById" resultType="koreatech.in.domain.User.UserType">
        SELECT user_type as userType FROM koin.users WHERE ID = #{id}
    </select>

    <select id="getUserEmail" resultType="String">
        SELECT EMAIL FROM koin.users WHERE ID = #{id}
    </select>

    <select id="getUserByAuthToken" resultMap="UserDiscriminator">
        SELECT * FROM koin.users WHERE AUTH_TOKEN = #{authToken};
    </select>

    <select id="getUserByResetToken" resultMap="UserDiscriminator">
        SELECT * FROM koin.users WHERE RESET_TOKEN = #{resetToken}
    </select>

    <insert id="insertUser">
        INSERT IGNORE
        INTO koin.users (
        account,
        password,
        name,
        nickname,
        gender,
        phone_number,
        email,
        auth_token,
        auth_expired_at,
        is_authed,
        profile_image_url,
        user_type)
        VALUES (
        #{account},
        #{password},
        #{name},
        #{nickname},
        #{gender},
        #{phoneNumber},
        #{email},
        #{authToken},
        #{authExpiredAt},
        #{isAuthed},
        #{profileImageUrl},
        #{userType});
        <selectKey keyProperty="id" resultType="Integer">
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>

    <update id="updateUserIsAuthed">
        update koin.users
        set is_authed=#{isAuth}
        where id=#{id}
    </update>
</mapper>