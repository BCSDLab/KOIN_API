<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="koreatech.in.repository.ShopMapper">
    <update id="deleteAllForInvolvedWithMenuForAdmin">
        UPDATE (
            koin.shop_menus sm

            LEFT JOIN koin.shop_menu_details smd
            ON sm.id = smd.shop_menu_id

            LEFT JOIN koin.shop_menu_images smi
            ON sm.id = smi.shop_menu_id

            LEFT JOIN koin.shop_menu_category_map smcm
            ON sm.id = smcm.shop_menu_id
        )
        SET
            sm.is_deleted = 1,
            smd.is_deleted = 1,
            smi.is_deleted = 1,
            smcm.is_deleted = 1
        WHERE
            sm.id = #{shopMenuId}
    </update>

    <insert id="createMenuImagesForAdmin" parameterType="list">
        INSERT INTO koin.shop_menu_images
        (shop_menu_id, image_url)
        VALUES
        <foreach collection="shopMenuImages" item="item" separator=",">
            (
                #{item.shop_menu_id},
                #{item.image_url}
            )
        </foreach>
    </insert>

    <insert id="createMenuDetailsForAdmin" parameterType="list">
        INSERT INTO koin.shop_menu_details
        (shop_menu_id, `option`, price)
        VALUES
        <foreach collection="shopMenuDetails" item="item" separator=",">
            (
                #{item.shop_menu_id},
                #{item.option},
                #{item.price}
            )
        </foreach>
    </insert>

    <insert id="createMenuCategoryMapsForAdmin" parameterType="list">
        INSERT INTO koin.shop_menu_category_map
        (shop_menu_id, shop_menu_category_id)
        VALUES
        <foreach collection="shopMenuCategoryMaps" item="item" separator=",">
            (
                #{item.shop_menu_id},
                #{item.shop_menu_category_id}
            )
        </foreach>
    </insert>

    <update id="deleteMenuDetailsForAdmin" parameterType="list">
        <foreach collection="shopMenuDetails" item="item" separator=";">
            UPDATE koin.shop_menu_details
            SET is_deleted = 1
            WHERE id = #{item.id}
        </foreach>
    </update>

    <update id="deleteMenuCategoryMapsForAdmin" parameterType="list">
        <foreach collection="shopMenuCategoryMaps" item="item" separator=";">
            UPDATE koin.shop_menu_category_map
            SET is_deleted = 1
            WHERE
                shop_menu_id = #{item.shop_menu_id}
                AND shop_menu_category_id = #{item.shop_menu_category_id}
        </foreach>
    </update>

    <insert id="createShopOpensForAdmin" parameterType="list">
        INSERT INTO koin.shop_opens
        (shop_id, day_of_week, closed, open_time, close_time)
        VALUES
        <foreach collection="shopOpens" item="item" separator=",">
            <choose>
                <when test="item.closed">
                    (
                        #{item.shop_id},
                        #{item.day_of_week},
                        #{item.closed},
                        null,
                        null
                    )
                </when>
                <otherwise>
                    (
                        #{item.shop_id},
                        #{item.day_of_week},
                        #{item.closed},
                        #{item.open_time},
                        #{item.close_time}
                    )
                </otherwise>
            </choose>
        </foreach>
    </insert>

    <insert id="createShopCategoryMapsForAdmin" parameterType="list">
        INSERT INTO koin.shop_category_map
        (shop_id, shop_category_id)
        VALUES
        <foreach collection="shopCategoryMaps" item="item" separator=",">
            (
                #{item.shop_id},
                #{item.shop_category_id}
            )
        </foreach>
    </insert>

    <insert id="createMenuCategoriesForAdmin" parameterType="list">
        INSERT INTO koin.shop_menu_categories
        (shop_id, `name`)
        VALUES
        <foreach collection="shopMenuCategories" item="item" separator=",">
            (
                #{item.shop_id},
                #{item.name}
            )
        </foreach>
    </insert>

    <update id="updateShopOpensForAdmin" parameterType="list">
        <foreach collection="shopOpens" item="item" separator=";">
            UPDATE koin.shop_opens
            SET
                closed = #{item.closed},
                <choose>
                    <when test="item.closed">
                        open_time = null,
                        close_time = null
                    </when>
                    <otherwise>
                        open_time = #{item.open_time},
                        close_time = #{item.close_time}
                    </otherwise>
                </choose>
            WHERE
                shop_id = #{item.shop_id}
                AND day_of_week = #{item.day_of_week}
                AND is_deleted = 0
        </foreach>
    </update>

    <update id="deleteShopCategoryMapsForAdmin" parameterType="list">
        <foreach collection="shopCategoryMaps" item="item" separator=";">
            UPDATE koin.shop_category_map
            SET is_deleted = 1
            WHERE
                shop_id = #{item.shop_id}
                AND shop_category_id = #{item.shop_category_id}
        </foreach>
    </update>

    <insert id="createShopImagesForAdmin" parameterType="list">
        INSERT INTO koin.shop_images
        (shop_id, image_url)
        VALUES
        <foreach collection="shopImages" item="item" separator=",">
            (
                #{item.shop_id},
                #{item.image_url}
            )
        </foreach>
    </insert>

    <update id="deleteShopImagesForAdmin" parameterType="list">
        <foreach collection="shopImages" item="item" separator=";">
            UPDATE koin.shop_images
            SET is_deleted = 1
            WHERE
                shop_id = #{item.shop_id}
                AND image_url = #{item.image_url}
        </foreach>
    </update>

    <update id="deleteMenuImagesForAdmin" parameterType="list">
        <foreach collection="shopMenuImages" item="item" separator=";">
            UPDATE koin.shop_menu_images
            SET is_deleted = 1
            WHERE
                shop_menu_id = #{item.shop_menu_id}
                AND image_url = #{item.image_url}
        </foreach>
    </update>

    <select id="getTotalCountOfShopsByConditionForAdmin" parameterType="koreatech.in.dto.shop.admin.request.ShopsCondition" resultType="integer">
        SELECT COUNT(*)
        FROM koin.shops

        <trim prefix="WHERE" prefixOverrides="AND">
            <!-- 검색 -->
            <if test="condition.query != null">
                <trim prefix="AND">
                    <if test='condition.searchType.name().equals("NAME")'>
                        internal_name
                    </if>
                    LIKE CONCAT('%', REPLACE(#{condition.query}, ' ', ''), '%')
                </trim>
            </if>

            <!-- 필터링 -->
            <if test="!condition.filter.isEmpty()">
                <trim prefix="AND">
                    <foreach collection="condition.filter" item="item" separator="AND">
                        <if test='item.name().equals("IS_DELETED")'> is_deleted = 1 </if>
                        <if test='item.name().equals("DELIVERY")'> delivery = 1 </if>
                        <if test='item.name().equals("PAY_CARD")'> pay_card = 1 </if>
                        <if test='item.name().equals("PAY_BANK")'> pay_bank = 1 </if>
                    </foreach>
                </trim>
            </if>
        </trim>
    </select>

    <select id="getRelatedToShopsByConditionForAdmin" parameterType="koreatech.in.dto.shop.admin.request.ShopsCondition" resultMap="RelatedToShop">
        SELECT
            # shops
            t1.id AS `shops.id`,
            t1.name AS `shops.name`,
            t1.phone AS `shops.phone`,
            t1.address AS `shops.address`,
            t1.description AS `shops.description`,
            t1.delivery AS `shops.delivery`,
            t1.delivery_price AS `shops.delivery_price`,
            t1.pay_card AS `shops.pay_card`,
            t1.pay_bank AS `shops.pay_bank`,
            t1.is_deleted AS `shops.is_deleted`,

            # shop_opens
            t2.day_of_week AS `shop_opens.day_of_week`,
            t2.closed AS `shop_opens.closed`,
            t2.open_time AS `shop_opens.open_time`,
            t2.close_time AS `shop_opens.close_time`,

            # shop_images
            t3.image_url AS `shop_images.image_url`,

            # shop_menu_categories
            t4.id AS `shop_menu_categories.id`,
            t4.name AS `shop_menu_categories.name`,

            # shop_categories
            t6.id AS `shop_categories.id`,
            t6.name AS `shop_categories.name`

        FROM (
            SELECT *
            FROM koin.shops

            <trim prefix="WHERE" prefixOverrides="AND">
                <!-- 검색 -->
                <if test="condition.query != null">
                    <trim prefix="AND">
                        <if test='condition.searchType.name().equals("NAME")'>
                            internal_name
                        </if>
                        LIKE CONCAT('%', REPLACE(#{condition.query}, ' ', ''), '%')
                    </trim>
                </if>

                <!-- 필터링 -->
                <if test="!condition.filter.isEmpty()">
                    <trim prefix="AND">
                        <foreach collection="condition.filter" item="item" separator="AND">
                            <if test='item.name().equals("IS_DELETED")'> is_deleted = 1 </if>
                            <if test='item.name().equals("DELIVERY")'> delivery = 1 </if>
                            <if test='item.name().equals("PAY_CARD")'> pay_card = 1 </if>
                            <if test='item.name().equals("PAY_BANK")'> pay_bank = 1 </if>
                        </foreach>
                    </trim>
                </if>
            </trim>

            <if test="condition.sort != null">
                <trim prefix="ORDER BY">
                    <if test='condition.sort.name().equals("NAME_ASC")'> `name` ASC </if>
                    <if test='condition.sort.name().equals("NAME_DESC")'> `name` DESC </if>
                    <if test='condition.sort.name().equals("CREATED_AT_ASC")'> created_at ASC </if>
                    <if test='condition.sort.name().equals("CREATED_AT_DESC")'> created_at DESC </if>
                </trim>
            </if>

            LIMIT #{begin}, #{condition.limit}
        ) t1

            # shops : shop_opens (1:N)
            LEFT JOIN koin.shop_opens t2
            ON
                t1.id = t2.shop_id
                AND t2.is_deleted = 0

            # shops : shop_images (1:N)
            LEFT JOIN koin.shop_images t3
            ON
                t1.id = t3.shop_id
                AND t3.is_deleted = 0

            # shops : shop_menu_categories (1:N)
            LEFT JOIN koin.shop_menu_categories t4
            ON
                t1.id = t4.shop_id
                AND t4.is_deleted = 0

            # relation table between shops and shop_categories
            LEFT JOIN koin.shop_category_map t5
            ON
                t1.id = t5.shop_id
                AND t5.is_deleted = 0

            # shops : shop_categories (N:M)
            LEFT JOIN koin.shop_categories t6
            ON
                t5.shop_category_id = t6.id
                AND t6.is_deleted = 0
    </select>

    <select id="getRelatedToShopByShopId" resultMap="RelatedToShop">
        SELECT
            # shops
            t1.id AS `shops.id`,
            t1.name AS `shops.name`,
            t1.phone AS `shops.phone`,
            t1.address AS `shops.address`,
            t1.description AS `shops.description`,
            t1.delivery AS `shops.delivery`,
            t1.delivery_price AS `shops.delivery_price`,
            t1.pay_card AS `shops.pay_card`,
            t1.pay_bank AS `shops.pay_bank`,
            t1.is_deleted AS `shops.is_deleted`,

            # shop_opens
            t2.day_of_week AS `shop_opens.day_of_week`,
            t2.closed AS `shop_opens.closed`,
            t2.open_time AS `shop_opens.open_time`,
            t2.close_time AS `shop_opens.close_time`,

            # shop_images
            t3.image_url AS `shop_images.image_url`,

            # shop_menu_categories
            t4.id AS `shop_menu_categories.id`,
            t4.name AS `shop_menu_categories.name`,

            # shop_categories
            t6.id AS `shop_categories.id`,
            t6.name AS `shop_categories.name`

        FROM (
            # shops
            SELECT *
            FROM koin.shops
            WHERE id = #{shopId}
        ) t1

            # shops : shop_opens (1:N)
            LEFT JOIN koin.shop_opens t2
            ON
                t1.id = t2.shop_id
                AND t2.is_deleted = 0

            # shops : shop_images (1:N)
            LEFT JOIN koin.shop_images t3
            ON
                t1.id = t3.shop_id
                AND t3.is_deleted = 0

            # shops : shop_menu_categories (1:N)
            LEFT JOIN koin.shop_menu_categories t4
            ON
                t1.id = t4.shop_id
                AND t4.is_deleted = 0

            # relation table between shops and shop_categories
            LEFT JOIN koin.shop_category_map t5
            ON
                t1.id = t5.shop_id
                AND t5.is_deleted = 0

            # shops : shop_categories (N:M)
            LEFT JOIN koin.shop_categories t6
            ON
                t5.shop_category_id = t6.id
                AND t6.is_deleted = 0
    </select>

    <select id="getRelatedToShops" resultMap="RelatedToShop">
        SELECT
            # shops
            t1.id AS `shops.id`,
            t1.name AS `shops.name`,
            t1.phone AS `shops.phone`,
            t1.address AS `shops.address`,
            t1.description AS `shops.description`,
            t1.delivery AS `shops.delivery`,
            t1.delivery_price AS `shops.delivery_price`,
            t1.pay_card AS `shops.pay_card`,
            t1.pay_bank AS `shops.pay_bank`,
            t1.is_deleted AS `shops.is_deleted`,

            # shop_opens
            t2.day_of_week AS `shop_opens.day_of_week`,
            t2.closed AS `shop_opens.closed`,
            t2.open_time AS `shop_opens.open_time`,
            t2.close_time AS `shop_opens.close_time`,

            # shop_images
            t3.image_url AS `shop_images.image_url`,

            # shop_menu_categories
            t4.id AS `shop_menu_categories.id`,
            t4.name AS `shop_menu_categories.name`,

            # shop_categories
            t6.id AS `shop_categories.id`,
            t6.name AS `shop_categories.name`

        FROM (
            # shops
            SELECT *
            FROM koin.shops
            WHERE is_deleted = 0
        ) t1

            # shops : shop_opens (1:N)
            LEFT JOIN koin.shop_opens t2
            ON
                t1.id = t2.shop_id
                AND t2.is_deleted = 0

            # shops : shop_images (1:N)
            LEFT JOIN koin.shop_images t3
            ON
                t1.id = t3.shop_id
                AND t3.is_deleted = 0

            # shops : shop_menu_categories (1:N)
            LEFT JOIN koin.shop_menu_categories t4
            ON
                t1.id = t4.shop_id
                AND t4.is_deleted = 0

            # relation table between shops and shop_categories
            LEFT JOIN koin.shop_category_map t5
            ON
                t1.id = t5.shop_id
                AND t5.is_deleted = 0

            # shops : shop_categories (N:M)
            LEFT JOIN koin.shop_categories t6
            ON
                t5.shop_category_id = t6.id
                AND t6.is_deleted = 0
    </select>

    <resultMap id="RelatedToShop" type="koreatech.in.domain.Shop.RelatedToShop">
        <id property="id" column="shops.id"/>
        <result property="name" column="shops.name"/>
        <result property="phone" column="shops.phone"/>
        <result property="address" column="shops.address"/>
        <result property="description" column="shops.description"/>
        <result property="delivery" column="shops.delivery"/>
        <result property="delivery_price" column="shops.delivery_price"/>
        <result property="pay_card" column="shops.pay_card"/>
        <result property="pay_bank" column="shops.pay_bank"/>
        <result property="is_deleted" column="shops.is_deleted"/>

        <collection property="open" javaType="list" ofType="koreatech.in.domain.Shop.RelatedToShop$Open">
            <result property="day_of_week" column="shop_opens.day_of_week" />
            <result property="closed" column="shop_opens.closed"/>
            <result property="open_time" column="shop_opens.open_time" />
            <result property="close_time" column="shop_opens.close_time"/>
        </collection>

        <collection property="image_urls" javaType="list" ofType="string">
            <result property="image_url" column="shop_images.image_url"/>
        </collection>

        <collection property="menu_categories" javaType="list" ofType="koreatech.in.domain.Shop.RelatedToShop$MenuCategory">
            <id property="id" column="shop_menu_categories.id"/>
            <result property="name" column="shop_menu_categories.name"/>
        </collection>

        <collection property="shop_categories" javaType="list" ofType="koreatech.in.domain.Shop.RelatedToShop$ShopCategory">
            <id property="id" column="shop_categories.id"/>
            <result property="name" column="shop_categories.name"/>
        </collection>
    </resultMap>

    <select id="getRelatedToShopMenuByMenuId" resultMap="RelatedToShopMenu">
        SELECT
            # shop_menus
            t1.id AS `shop_menus.id`,
            t1.shop_id AS `shop_menus.shop_id`,
            t1.name AS `shop_menus.name`,
            t1.is_hidden AS `shop_menus.is_hidden`,
            t1.description AS `shop_menus.description`,

            # shop_menu_details
            t2.option AS `shop_menu_details.option`,
            t2.price AS `shop_menu_details.price`,

            # shop_menu_images
            t3.image_url AS `shop_menu_images.image_url`,

            # shop_menu_categories
            t5.id AS `shop_menu_categories.id`

        FROM (
            # shop_menus
            SELECT *
            FROM koin.shop_menus
            WHERE
                id = #{shopMenuId}
                AND is_deleted = 0
        ) t1

            # shop_menus : shop_menu_details (1:N)
            LEFT JOIN koin.shop_menu_details t2
            ON
                t1.id = t2.shop_menu_id
                AND t2.is_deleted = 0

            # shop_menus : shop_menu_images (1:N)
            LEFT JOIN koin.shop_menu_images t3
            ON
                t1.id = t3.shop_menu_id
                AND t3.is_deleted = 0

            # relation table between shop_menus and shop_menu_categories
            LEFT JOIN koin.shop_menu_category_map t4
            ON
                t1.id = t4.shop_menu_id
                AND t4.is_deleted = 0

            # shop_menus : shop_menu_categories (N:M)
            LEFT JOIN koin.shop_menu_categories t5
            ON
                t4.shop_menu_category_id = t5.id
                AND t5.is_deleted = 0
    </select>

    <select id="getRelatedToShopMenusOfShopByShopId" resultMap="RelatedToShopMenu">
        SELECT
            # shop_menus
            t1.id AS `shop_menus.id`,
            t1.shop_id AS `shop_menus.shop_id`,
            t1.name AS `shop_menus.name`,
            t1.is_hidden AS `shop_menus.is_hidden`,
            t1.description AS `shop_menus.description`,

            # shop_menu_details
            t2.option AS `shop_menu_details.option`,
            t2.price AS `shop_menu_details.price`,

            # shop_menu_images
            t3.image_url AS `shop_menu_images.image_url`,

            # shop_menu_categories
            t5.id AS `shop_menu_categories.id`

        FROM (
            # shop_menus
            SELECT *
            FROM koin.shop_menus
            WHERE
                shop_id = #{shopId}
                AND is_deleted = 0
        ) t1

            # shop_menus : shop_menu_details (1:N)
            LEFT JOIN koin.shop_menu_details t2
            ON
                t1.id = t2.shop_menu_id
                AND t2.is_deleted = 0

            # shop_menus : shop_menu_images (1:N)
            LEFT JOIN koin.shop_menu_images t3
            ON
                t1.id = t3.shop_menu_id
                AND t3.is_deleted = 0

            # relation table between shop_menus and shop_menu_categories
            LEFT JOIN koin.shop_menu_category_map t4
            ON
                t1.id = t4.shop_menu_id
                AND t4.is_deleted = 0

            # shop_menus : shop_menu_categories (N:M)
            LEFT JOIN koin.shop_menu_categories t5
            ON
                t4.shop_menu_category_id = t5.id
                AND t5.is_deleted = 0
    </select>

    <resultMap id="RelatedToShopMenu" type="koreatech.in.domain.Shop.RelatedToShopMenu">
        <id property="id" column="shop_menus.id"/>
        <result property="shop_id" column="shop_menus.shop_id"/>
        <result property="name" column="shop_menus.name"/>
        <result property="is_hidden" column="shop_menus.is_hidden"/>
        <result property="description" column="shop_menus.description"/>

        <collection property="option_prices" javaType="list" ofType="koreatech.in.domain.Shop.RelatedToShopMenu$OptionPrice">
            <result property="option" column="shop_menu_details.option"/>
            <result property="price" column="shop_menu_details.price"/>
        </collection>

        <collection property="image_urls" javaType="list" ofType="string">
            <result property="image_url" column="shop_menu_images.image_url"/>
        </collection>

        <collection property="category_ids" javaType="list" ofType="integer">
            <id property="id" column="shop_menu_categories.id"/>
        </collection>
    </resultMap>


    <select id="getTotalCountOfShopCategoriesByConditionForAdmin" parameterType="koreatech.in.dto.shop.admin.request.ShopCategoriesCondition" resultType="integer">
        SELECT COUNT(*)
        FROM koin.shop_categories
        WHERE is_deleted = 0

        <!-- 검색 -->
        <if test="condition.query != null">
            <trim prefix="AND">
                <if test='condition.searchType.name().equals("NAME")'> REPLACE(`name`, ' ', '') </if>
                LIKE CONCAT('%', REPLACE(#{condition.query}, ' ', ''), '%')
            </trim>
        </if>
    </select>

    <select id="getShopCategoriesByConditionForAdmin" parameterType="koreatech.in.dto.shop.admin.request.ShopCategoriesCondition" resultType="koreatech.in.domain.Shop.ShopCategory">
        SELECT *
        FROM koin.shop_categories
        WHERE is_deleted = 0

        <!-- 검색 -->
        <if test="condition.query != null">
            <trim prefix="AND">
                <if test='condition.searchType.name().equals("NAME")'> REPLACE(`name`, ' ', '') </if>
                LIKE CONCAT('%', REPLACE(#{condition.query}, ' ', ''), '%')
            </trim>
        </if>

        <!-- 정렬 -->
        <if test="condition.sort != null">
            <trim prefix="ORDER BY">
                <if test='condition.sort.name().equals("NAME_ASC")'> `name` ASC </if>
                <if test='condition.sort.name().equals("NAME_DESC")'> `name` DESC </if>
                <if test='condition.sort.name().equals("CREATED_AT_ASC")'> created_at ASC </if>
                <if test='condition.sort.name().equals("CREATED_AT_DESC")'> created_at DESC </if>
            </trim>
        </if>

        LIMIT #{begin}, #{condition.limit}
    </select>
</mapper>